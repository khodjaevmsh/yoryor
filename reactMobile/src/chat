import React, { useCallback, useContext, useEffect, useState } from 'react'
import { Text, View, StyleSheet, KeyboardAvoidingView, Platform } from 'react-native'
import { GiftedChat, InputToolbar, Send } from 'react-native-gifted-chat'
import { ArrowUp } from 'react-native-feather'
import { COLOR } from '../../utils/colors'
import { GlobalContext } from '../../context/GlobalContext'
import ChatDetailHeader from '../../components/ChatDetailHeader'

export default function ChatDetail({ route }) {
    const [messages, setMessages] = useState([])
    const [socket, setSocket] = useState(null)
    const { profile } = route.params
    const { user, token } = useContext(GlobalContext)
    const roomName = 'default'

    useEffect(() => {
    // Initialize WebSocket connection
        const newSocket = new WebSocket(`ws://localhost:8000/ws/chat/${roomName}/?token=${token}`)
        newSocket.onopen = () => {
            console.log('WebSocket connection opened')
            setSocket(newSocket)
        }
        newSocket.onmessage = (event) => {
            const receivedMessage = JSON.parse(event.data)
            setMessages((previousMessages) => GiftedChat.append(previousMessages, receivedMessage))
        }
        newSocket.onclose = (event) => {
            console.log('WebSocket connection closed:', event.code, event.reason)
        }
        return () => {
        // Clean up WebSocket connection when component unmounts
            newSocket.close()
        }
    }, [token, roomName])

    const onSend = (newMessages) => {
    // Assuming that the message format is { text, user }
        const message = newMessages[0]

        // Update the local state with the new message
        setMessages((previousMessages) => GiftedChat.append(previousMessages, message))

        // Send the message to the WebSocket server
        socket.send(JSON.stringify({
            text: message.text,
            user: message.user,
        }))
    }

    return (
        <View style={styles.container}>
            <ChatDetailHeader profile={profile} />
            <View style={{ flex: 1 }}>
                <GiftedChat
                    messages={messages}
                    onSend={(newMessages) => onSend(newMessages)}
                    user={{ _id: user.id }}
                    renderInputToolbar={(props) => (
                        <InputToolbar {...props} containerStyle={styles.inputToolBar} />
                    )}
                    textInputStyle={styles.textInputStyle}
                    alwaysShowSend
                    renderSend={(props) => (
                        <Send {...props}>
                            <View style={styles.sendIcon}>
                                <ArrowUp strokeWidth={2.3} />
                            </View>
                        </Send>
                    )}
                />
            </View>

            {Platform.OS === 'android' && <KeyboardAvoidingView behavior="height" />}
        </View>
    )
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        paddingBottom: 22,
    },
    inputToolBar: {
        overflow: 'hidden',
        paddingBottom: 5,
        borderTopWidth: 0,
    },
    textInputStyle: {
        paddingTop: 9,
        paddingLeft: 14,
        backgroundColor: COLOR.white,
        borderRadius: 18,
        overflow: 'hidden',
        marginLeft: 15,
        borderColor: COLOR.lightGrey,
        borderWidth: 0.8,
    },
    sendIcon: {
        backgroundColor: COLOR.lightGrey,
        borderRadius: 50,
        padding: 4,
        marginRight: 15,
        marginLeft: 12,
    },
})
